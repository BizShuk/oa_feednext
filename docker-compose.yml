version: '3.5'

networks:
  app-network:
    driver: ${APP_NETWORK}

services:
  # ------------------------------------------------------------
  # Nginx - Webserver
  # ------------------------------------------------------------
  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - ${BACKEND_PORT}:80
    volumes:
      - ./.docker/nginx/conf.d/:/etc/nginx/conf.d
    depends_on:
      - node_server
    networks:
      - app-network


  # ------------------------------------------------------------
  # Node - Backend
  # ------------------------------------------------------------
  node_server:
    build:
      context: ./.docker/build/node
      args:
        NODE_VERSION: ${BACKEND_NODE_VER}-alpine
    hostname: node_server
    working_dir: /home/node/app
    volumes:
      - ./server:/home/node/app
    ports:
      - ${BACKEND_EXPOSE_PORT}:${BACKEND_APP_PORT}
    command: >
      sh -c "npm ci && npm run start:${START_BACKEND_AS}"
    depends_on:
      - redis
      - mongo
    networks:
      - app-network


  # ------------------------------------------------------------
  # Redis - Cache Management
  # ------------------------------------------------------------
  redis:
    image: redis:${REDIS_SERVER}-alpine
    hostname: redis
    # Apply custom arguments to redis startup
    command: redis-server ${REDIS_ARGS:- }
    environment:
      - REDIS_ARGS=${REDIS_ARGS:- }

    ports:
      - ${LOCAL_LISTEN_ADDR}${HOST_PORT_REDIS}:6379
    networks:
      - app-network


  # ------------------------------------------------------------
  # MongoDB - Database
  # ------------------------------------------------------------
  mongo:
    image: mongo:${MONGO_SERVER}
    hostname: mongo
    ports:
      # [local-machine:]local-port:docker-port
      - ${LOCAL_LISTEN_ADDR}${HOST_PORT_MONGO}:27017

    volumes:
      # Mount MongoDB Data directory
      - ./.docker/data/mongo:/data/db
    networks:
      - app-network
